//==================================================================
// Sunflow Renderer Tab
//==================================================================

// Description: Utility procedure used by other procedures in this file.
//		Must be used to account for multiple instances of the same tab.
//
global proc setParentToSunflowTab()
{
	// First set the parent to the correct tab layout.
	// Account for the special "all renderers" master layer layout
	// when we are using render layers
	global string $gMasterLayerRendererName;
	string $renderer = isDisplayingAllRendererTabs() ? $gMasterLayerRendererName : `currentRenderer`;
	string $tabLayout = rendererTabLayoutName($renderer);
	setParent $tabLayout;

	// Now set the parent to the correct column layout
	setParent sunflowTabColumn;
}


// updateMayaSunflowGlobalsUI
//
// Updates the Sunflow Render Globals UI based on changes in the vector format
//
global proc updateMayaSunflowGlobalsUI()
{
	string $sunflowGlobals = sunflowCheckGlobals();
	string $prefix = sunflowGetPrefix();
}



// enableMayaVectorLayout
//
// This callback function can be called when a checkBoxGrp checkbox 
// controls the enabled state of a layout.  
//
// Parameters:
// $attrName        	- a string representing a boolean attribute 
// $layoutAffected	- a string which is the name of the layout controlled by the passed attribute
// $invert		- false if the attribute disables the layout when 
//					  it is set to false; true if the attribute disables
//					  the layout when it is set to true
//
global proc enableSunflowLayout(
	string $attrName, 
	string $layoutAffected, 
	int    $invert) 
{
	string $oldParent = `setParent -query`;
	setParentToSunflowTab();

	// Get the value of the attribute.
	int $state = `getAttr $attrName`;

	if ( $invert ) {
		$state = !$state;
	}

	// Disable/Enable the given layout based on the value.
	layout -edit -enable $state $layoutAffected;

	setParent $oldParent;
}

// initializeUI
//
// This function initilize the parts of UI which are 
// created manually and which needs to be updated manually.
//
proc initializeUI() 
{
	string $prefix 		= sunflowGetPrefix();
	string $sunflowGlobals	= sunflowCheckGlobals();
}

// createSunflowSamplingFrame
//
// Creates the sunflow sampling frame layout for the Sunflow tab of the Sunflow 
// Render Globals
//
global proc createSunflowSamplingFrame( string $sunflowGlobals, string $parent )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	setParentToSunflowTab();
	setParent $parent;

	string $prefix = sunflowGetPrefix();

	columnLayout -adj true;

		// Min Sampling Tolerance
		attrFieldSliderGrp -min -3 -max 6 -label "Min Sampling" -attribute ($sunflowGlobals + ".minSamples");
		// Max Sampling Tolerance
		attrFieldSliderGrp -min -3 -max 6 -label "Max Sampling" -attribute ($sunflowGlobals + ".maxSamples");

		// Pixel Filter
		string $fullControlName = `optionMenuGrp -label "Pixel Filter"
			-changeCommand "updateSunflowPixelFilter" ($prefix + "PixelFilter")`;
			menuItem -label "box";
			menuItem -label "triangle";
			menuItem -label "catmull-rom";
			menuItem -label "mitchell";
			menuItem -label "lanczos";
			menuItem -label "blackman-harris";
			menuItem -label "sinc";

	// end columnLayout
	setParent ..;

	setUITemplate -popTemplate;
}

global proc updateSunflowPixelFilter(){
	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	// Get the current selection for the pixel filter.
	string $menuName = ($prefix + "PixelFilter"); 
	int    $selection = `optionMenuGrp -q -select $menuName`;
	setAttr ($sunflowGlobals + ".pixelFilter") ($selection-1);
}

global proc updateSunflowSamplingFrameUI()
{
	string $oldParent = `setParent -query`;
	setParentToSunflowTab();

	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	string $menuName = ($prefix + "PixelFilter"); 

	int $filter = `getAttr ($sunflowGlobals + ".pixelFilter")`;	

	optionMenuGrp -edit -select ($filter+1) $menuName;

	setParent $oldParent;
}

// createSunflowPhotonFrame
//
// Creates the sunflow photon frame layout for the Sunflow tab of the Sunflow 
// Render Globals
//
global proc createSunflowPhotonFrame( string $sunflowGlobals, string $parent )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	setParentToSunflowTab();
	setParent $parent;

	string $prefix = sunflowGetPrefix();

	columnLayout -adj true;

		// Enable Photons
		attrControlGrp -label "Enable Photons" -attribute ($sunflowGlobals + ".enablePhotons") -cc "updateSunflowPhotonFrameUI";
		
		frameLayout -collapsable true -collapse 0 -bv false -lv false ($prefix+"PhotonAttributesFrame");
			columnLayout -adj true;
			// Photons
			attrControlGrp -label "Photons" -attribute ($sunflowGlobals + ".Photons");
			// Photons Kd
			attrControlGrp -label "Photons Kd" -attribute ($sunflowGlobals + ".PhotonsKd");
			// Photons Radius
			attrControlGrp -label "Photons Radius" -attribute ($sunflowGlobals + ".PhotonsRadius");
			setParent..;
		setParent..;
		
	// end columnLayout
	setParent ..;

	setUITemplate -popTemplate;
}

global proc updateSunflowPhotonFrameUI()
{
	string $oldParent = `setParent -query`;
	setParentToSunflowTab();

	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	int $photonState = `getAttr ($sunflowGlobals + ".enablePhotons")`;

	frameLayout -e -enable $photonState ($prefix+"PhotonAttributesFrame");

	setParent $oldParent;
}

// createSunflowTraceFrame
//
// Creates the sunflow trace frame layout for the Sunflow tab of the Sunflow 
// Render Globals
//
global proc createSunflowTraceFrame( string $sunflowGlobals, string $parent )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	setParentToSunflowTab();
	setParent $parent;

	string $prefix = sunflowGetPrefix();

	columnLayout -adj true;		
		// Diffuse Dept
		attrFieldSliderGrp -min 1 -max 10 -label "Diffuse" -attribute ($sunflowGlobals + ".diffuseDepth");
		// Reflection Dept
		attrFieldSliderGrp -min 1 -max 10 -label "Reflection" -attribute ($sunflowGlobals + ".reflectionDepth");
		// Refraction Dept
		attrFieldSliderGrp -min 1 -max 10 -label "Refraction" -attribute ($sunflowGlobals + ".refractionDepth");		
	// end columnLayout
	setParent ..;

	setUITemplate -popTemplate;
}


// createSunflowGIFrame
//
// Creates the sunflow GI frame layout for the Sunflow tab of the Sunflow 
// Render Globals
//
global proc createSunflowGIFrame( string $sunflowGlobals, string $parent )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	setParentToSunflowTab();
	setParent $parent;

	string $prefix = sunflowGetPrefix();

	columnLayout -adj true;

		// Enable GI
		attrControlGrp -label "Enable GI" -attribute ($sunflowGlobals + ".enableGI") -cc "updateSunflowGIFrameUI";

		frameLayout -collapsable true -collapse 0 -bv false -lv false ($prefix+"GIAttributesFrame");
			columnLayout -adj true;
				// GI Mode
				string $fullControlName = `optionMenuGrp -label "GI Mode"
					-changeCommand "updateSunflowGIMode" ($prefix + "GIMode")`;
					menuItem -label "Path Tracing";
					menuItem -label "IGI";
					menuItem -label "Irradiance Cache";
				
				frameLayout -l "Path Tracing" -collapsable true -collapse 0 -bv false -lv false ($prefix+"PTAttributesFrame");
					columnLayout -adj true;
					// PTSamples
					attrControlGrp -label "Samples" -attribute ($sunflowGlobals + ".PTSamples");
					setParent..;
				setParent..;
				
				frameLayout -l "IGI" -collapsable true -collapse 0 -bv false -lv false ($prefix+"IGIAttributesFrame");
					columnLayout -adj true;
					// IGI Samples
					attrControlGrp -label "Samples" -attribute ($sunflowGlobals + ".IGISamples");
					// IGI Sets
					attrControlGrp -label "Sets" -attribute ($sunflowGlobals + ".IGISets");
					// IGI Bias
					attrControlGrp -label "Bias" -attribute ($sunflowGlobals + ".IGIBias");
					// IGI Bias Samples
					attrControlGrp -label "Bias Samples" -attribute ($sunflowGlobals + ".IGIBSamples");					
					setParent..;
				setParent..;
				
				frameLayout -l "Irradiance Cache" -collapsable true -collapse 0 -bv false -lv false ($prefix+"ICAttributesFrame");
					columnLayout -adj true;
					// IC Samples
					attrControlGrp -label "Samples" -attribute ($sunflowGlobals + ".ICSamples");
					// IC Tolerance
					attrControlGrp -label "Tolerance" -attribute ($sunflowGlobals + ".ICTolerance");
					// IC Min Spacing
					attrControlGrp -label "Min Spacing" -attribute ($sunflowGlobals + ".ICSpacingMin");
					// IC Max Spacing
					attrControlGrp -label "Max Spacing" -attribute ($sunflowGlobals + ".ICSpacingMax");					
					setParent..;
				setParent..;
			
			setParent..;
		setParent..;

	// end columnLayout
	setParent ..;

	setUITemplate -popTemplate;
}

global proc updateSunflowGIMode(){
	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	// Get the current selection for the GI Mode.
	string $menuName = ($prefix + "GIMode"); 
	int    $selection = `optionMenuGrp -q -select $menuName`;
	setAttr ($sunflowGlobals + ".GIMode") ($selection-1);
	updateSunflowGIFrameUI();
}

global proc updateSunflowGIFrameUI()
{
	string $oldParent = `setParent -query`;
	setParentToSunflowTab();

	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	int $GIState = `getAttr ($sunflowGlobals + ".enableGI")`;
	
	frameLayout -e -vis $GIState ($prefix+"GIAttributesFrame");
	
	int $GIMode = `getAttr ($sunflowGlobals + ".GIMode")`;
	
	frameLayout -e -vis false ($prefix+"PTAttributesFrame");
	frameLayout -e -vis false ($prefix+"IGIAttributesFrame");
	frameLayout -e -vis false ($prefix+"ICAttributesFrame");
	
	if($GIMode==0)
		frameLayout -e -vis true ($prefix+"PTAttributesFrame");
	if($GIMode==1)
		frameLayout -e -vis true ($prefix+"IGIAttributesFrame");
	if($GIMode==2)
		frameLayout -e -vis true ($prefix+"ICAttributesFrame");

	setParent $oldParent;
}

// createSunflowOverrideFrame
//
// Creates the sunflow override frame layout for the Sunflow tab of the Sunflow 
// Render Globals
//
global proc createSunflowOverrideFrame( string $sunflowGlobals, string $parent )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	setParentToSunflowTab();
	setParent $parent;

	string $prefix = sunflowGetPrefix();

	columnLayout -adj true;
		// Material Override
		string $fullControlName = `optionMenuGrp -label "Material Override"
			-changeCommand "updateSunflowOverride" ($prefix + "MaterialOverride")`;
			menuItem -label "none";
			menuItem -label "ambocc";
			menuItem -label "uvs";
			menuItem -label "normals";
			menuItem -label "id";
			menuItem -label "prims";
			menuItem -label "gray";
			menuItem -label "wire";
		frameLayout -collapsable true -collapse 0 -bv false -lv false ($prefix+"OverrideAttributesFrame");
			columnLayout -adj true;
				attrControlGrp -label "Max Distance" -attribute ($sunflowGlobals + ".ambOverrideDist");
			setParent..;
		setParent..;

	// end columnLayout
	setParent ..;

	setUITemplate -popTemplate;
}

global proc updateSunflowOverride(){
	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	// Get the current selection for the pixel filter.
	string $menuName = ($prefix + "MaterialOverride");
	int    $selection = `optionMenuGrp -q -select $menuName`;
	setAttr ($sunflowGlobals + ".materialOverride") ($selection-1);
	updateSunflowOverrideFrameUI();
}

global proc updateSunflowOverrideFrameUI()
{
	string $oldParent = `setParent -query`;
	setParentToSunflowTab();

	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();
	string $menuName = ($prefix + "MaterialOverride"); 

	int $override = `getAttr ($sunflowGlobals + ".materialOverride")`;	

	optionMenuGrp -edit -select ($override+1) $menuName;
	
	frameLayout -e -vis false ($prefix+"OverrideAttributesFrame");
	if($override==1)
		frameLayout -e -vis true ($prefix+"OverrideAttributesFrame");

	setParent $oldParent;
}

// createSunflowSystemFrame
//
// Creates the sunflow override frame layout for the Sunflow tab of the Sunflow 
// Render Globals
//
global proc createSunflowSystemFrame( string $sunflowGlobals, string $parent )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	setParentToSunflowTab();
	setParent $parent;

	string $prefix = sunflowGetPrefix();

	columnLayout -adj true;
		textFieldButtonGrp -label "Export Path" -text "" -buttonLabel "..." -bc "fileBrowserDialog -m 4 -fc \"sunflowSetExportPath\" -ft \"directory\" -an \"Select\";" ($prefix+"ExportPath");
		textFieldButtonGrp -label "Java Path" -text "Text" -buttonLabel "..." -bc "fileBrowserDialog -m 4 -fc \"sunflowSetJavaPath\" -ft \"directory\" -an \"Select\";" ($prefix+"JavaPath");
		textFieldButtonGrp -label "Sunflow Path" -text "Text" -buttonLabel "..." -bc "fileBrowserDialog -m 4 -fc \"sunflowSetSunflowPath\" -ft \"directory\" -an \"Select\";" ($prefix+"SunflowPath");		
			
	// end columnLayout
	setParent ..;

	setUITemplate -popTemplate;
}

global proc int sunflowSetExportPath( string $dirName, string $fileType )
{
	string $sunflowGlobals = sunflowCheckGlobals();	
	setAttr -type "string" ($sunflowGlobals+".exportPath") $dirName;
	updateSunflowSystemFrameUI();
	return 1;
}

global proc int sunflowSetJavaPath( string $dirName, string $fileType )
{
	string $sunflowGlobals = sunflowCheckGlobals();
	setAttr -type "string" ($sunflowGlobals+".javaPath") $dirName;
	writeSunflowINI($sunflowGlobals);
	updateSunflowSystemFrameUI();
	return 1;
}

global proc int sunflowSetSunflowPath( string $dirName, string $fileType )
{
	string $sunflowGlobals = sunflowCheckGlobals();	
	setAttr -type "string" ($sunflowGlobals+".sunflowPath") $dirName;
	writeSunflowINI($sunflowGlobals);
	updateSunflowSystemFrameUI();
	return 1;
}

global proc updateSunflowSystemFrameUI()
{
	string $oldParent = `setParent -query`;
	setParentToSunflowTab();

	string $prefix = sunflowGetPrefix();
	string $sunflowGlobals = sunflowCheckGlobals();	

	string $exportPath = `getAttr ($sunflowGlobals + ".exportPath")`;
	string $javaPath = `getAttr ($sunflowGlobals + ".javaPath")`;
	string $sunflowPath = `getAttr ($sunflowGlobals + ".sunflowPath")`;

	textFieldButtonGrp -e -text $exportPath ($prefix+"ExportPath");
	textFieldButtonGrp -e -text $javaPath ($prefix+"JavaPath");
	textFieldButtonGrp -e -text $sunflowPath ($prefix+"SunflowPath");
	
	setParent $oldParent;
}


// createSunflowGlobalsTab
//
// Creates the Sunflow tab of the Sunflow Render Globals
//
global proc createSunflowGlobalsTab()
{
	string $prefix = sunflowGetPrefix();

	// Create the render globals node.
	string $sunflowGlobals = sunflowCheckGlobals();

	string $parentForm = `setParent -query`;
	setParent $parentForm;

	scrollLayout -horizontalScrollBarThickness 0 sunflowGlobalsTab;
		columnLayout -adjustableColumn true sunflowTabColumn;

			// Sampling options
			frameLayout -label "Sampling"
				-collapsable  true 
				-collapse 0
				sunflowSamplingFrame;

				createSunflowSamplingFrame( $sunflowGlobals, "sunflowSamplingFrame"); 

			setParent ..;
			
			// Photon options
			frameLayout -label "Photons"
				-collapsable  true 
				-collapse 0
				sunflowPhotonFrame;

				createSunflowPhotonFrame( $sunflowGlobals, "sunflowPhotonFrame");
				updateSunflowPhotonFrameUI();

			setParent ..;
			
			// Trace Depth options
			frameLayout -label "Trace Depths"
				-collapsable  true 
				-collapse 0
				sunflowTraceFrame;

				createSunflowTraceFrame( $sunflowGlobals, "sunflowTraceFrame");				

			setParent ..;
			
			// GI options
			frameLayout -label "Global Illumination"
				-collapsable  true 
				-collapse 0
				sunflowGIFrame;

				createSunflowGIFrame( $sunflowGlobals, "sunflowGIFrame");
				updateSunflowGIFrameUI();

			setParent ..;
			
			// Material Override options
			frameLayout -label "Material Override"
				-collapsable  true 
				-collapse 0
				sunflowOverrideFrame;

				createSunflowOverrideFrame( $sunflowGlobals, "sunflowOverrideFrame");
				updateSunflowOverrideFrameUI();

			setParent ..;
			
			// System options
			frameLayout -label "System"
				-collapsable  true 
				-collapse 0
				sunflowSystemFrame;

				createSunflowSystemFrame( $sunflowGlobals, "sunflowSystemFrame");
				updateSunflowSystemFrameUI();

			setParent ..;
			

		setParent ..;

	setParent $parentForm;

	formLayout
		-edit
		-af sunflowGlobalsTab "top" 0
		-af sunflowGlobalsTab "bottom" 0
		-af sunflowGlobalsTab "left" 0
		-af sunflowGlobalsTab "right" 0
		$parentForm;

	// We need to monitor these attributes to warn the user if nothing will be rendered	
	initializeUI();
}
