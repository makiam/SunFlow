global proc string sunflowGetPrefix() {
	return "sunflow";
}

global proc string sunflowCheckGlobals(){	
	string $sel[]= `ls -sl`;
	string $globalsNode;
	string $globalsNodes[] = stringArrayRemove({"<done>"},`lsType sunflowGlobalsNode`);	
	if(size($globalsNodes)){
		$globalsNode = $globalsNodes[0];
		string $unusedNodes[] = stringArrayRemove({$globalsNode},$globalsNodes);
		if(size($unusedNodes))
			delete $unusedNodes;
	}else{
		$globalsNode = `createNode sunflowGlobalsNode`;
		string $settings[] = `readSunflowINI`;
		setAttr -type "string" ($globalsNode+".javaPath") $settings[0];
		setAttr -type "string" ($globalsNode+".sunflowPath") $settings[1];
	}
	string $projPath = `workspace -q -rd`;
	string $tmpPath = $projPath+"sunflowScenes/";
	string $exportPath = `getAttr ($globalsNode+".exportPath")`;
	if(!`filetest -d $tmpPath`)
		sysFile -makeDir $tmpPath;
	if($exportPath=="")
		setAttr -type "string" ($globalsNode+".exportPath") $tmpPath;
	string $javaPath = `getAttr ($globalsNode+".javaPath")`;
	string $sunflowPath = `getAttr ($globalsNode+".sunflowPath")`;
	if(!size($javaPath) || !size($sunflowPath)){
		warning("Set your pathes under the system tab in Sunflow render globals!");
	}
	select $sel;
	return $globalsNode;
}

global proc string[] readSunflowINI(){	
	string $settings[] = {"","","","","","","","","","",""};
	string $pluginPath = `pluginInfo -q -p sunflowExport`;
	string $iniPath = `substitute ".mll" $pluginPath ".ini"`;
	$iniPath = `substitute ".so" $iniPath ".ini"`;
	if(!`filetest -r $iniPath`)
		return $settings;
	$fileId=`fopen $iniPath "r"`;
	string $nextLine = `fgetline $fileId`;
	while ( size( $nextLine ) > 0 ) {
		string $tokens[];
		$numTokens = `tokenize $nextLine "=" $tokens`;
		switch ($tokens[0]) {			
			case "javaPath":
				$settings[0] = `substitute "\n" $tokens[1] ""`;
				break;
			case "sunflowPath":
				$settings[1] = `substitute "\n" $tokens[1] ""`;
				break;
			default:
				break;
		}
		$nextLine = `fgetline $fileId`;
	}
	fclose $fileId;
	return $settings;
}

global proc writeSunflowINI(string $globalsNode){	
	string $pluginPath = `pluginInfo -q -p sunflowExport`;
	string $iniPath = `substitute ".mll" $pluginPath ".ini"`;
	$iniPath = `substitute ".so" $iniPath ".ini"`;
		
	print("Writing sunflow INI to file: "+$iniPath+"\n");
	
	string $javaPath = `getAttr ($globalsNode+".javaPath")`;
	string $sunflowPath = `getAttr ($globalsNode+".sunflowPath")`;
	
	$fileId=`fopen $iniPath "w"`;	
	fprint $fileId ("javaPath="+$javaPath+"\n");
	fprint $fileId ("sunflowPath="+$sunflowPath+"\n");
	fclose $fileId;
}

global proc string[] sunflowCreateSunSky(){
	string $sunightShape = `createNode directionalLight`;
	string $sunLight[] = `pickWalk -d up`;
	$sunLight[0] = `rename $sunLight[0] "sunflowSun#"`;
	setAttr ($sunLight[0]+".rotateX") -45;
	setAttr ($sunLight[0]+".rotateY") 45;
	setAttr ($sunLight[0]+".rotateZ") 0;
	string $sky = sunflowCreateSky($sunLight[0]);
	return {$sunLight[0], $sky};
}

global proc string sunflowCreateSky(string $light){
	string $lightShape[] = `listRelatives -s $light`;
	string $skyShape = `createNode sunflowSkyNode`;
	string $sky[] = `pickWalk -d up`;
	$sky[0] = `rename $sky[0] "sunflowSky#"`;
	string $tmp[] = `pickWalk -d down`;$skyShape=$tmp[0];
	connectAttr -f ($lightShape[0]+".message") ($skyShape+".sunLight");
	setAttr ($skyShape+".template") 1;
	setAttr ($skyShape+".size") 0.5;
	pointConstraint -offset 0 0 0 -weight 1 $light $sky[0];
	return $skyShape;
}

